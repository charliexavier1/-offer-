【方法一：哈希表 / Set】
用哈希表（Set）记录数组的各个数字，当查找到重复数字则直接返回。

算法流程：
初始化： 新建 HashSet ，记为 dicdic ；
遍历数组 numsnums 中的每个数字 numnum ：
当 numnum 在 dicdic 中，说明重复，直接返回 numnum ；
将 numnum 添加至 dicdic 中；
返回 -1 。本题中一定有重复数字，因此这里返回多少都可以。
复杂度分析：
时间复杂度 O(N)O(N) ： 遍历数组使用 O(N)O(N) ，HashSet 添加与查找元素皆为 O(1)O(1) 。
空间复杂度 O(N)O(N) ： HashSet 占用 O(N)O(N) 大小的额外空间。

from typing import List
nums = [2, 3, 1, 0, 2, 5, 3]
class Solution:
    def findRepeatNumber(self, nums: List[int]) -> int:
        dic = set()
        for num in nums:
            if num in dic:return num
            dic.add(num)
        return -1

a = Solution()
print(a.findRepeatNumber([2, 3, 1, 0, 2, 5, 3]))


更清晰的代码：
from typing import List
nums = [2, 3, 1, 0, 2, 5, 3]
class Solution:
    def findRepeatNumber(self, nums: List[int]) -> int:
        for i,v in enumerate(nums):
            if v!=i:
                if nums[v]==v:
                    return v
                else:
                    nums[i],nums[v] = nums[v],nums[i]
        return -1
a = Solution()
print(a.findRepeatNumber([2, 3, 1, 0, 2, 5, 3]))


【原地排序】

遍历中，第一次遇到数字 x 时，将其交换至索引 x 处；而当第二次遇到数字 x 时，一定有 nums[x]=x ，此时即可得到一组重复数字。

算法流程：
遍历数组 numsnums ，设索引初始值为 i = 0i=0 :

若 nums[i] = inums[i]=i ： 说明此数字已在对应索引位置，无需交换，因此跳过；
若 nums[nums[i]] = nums[i] ： 代表索引 nums[i] 处和索引 i 处的元素值都为 nums[i] ，即找到一组重复值，返回此值 nums[i] ；
否则： 交换索引为 i 和 nums[i] 的元素值，将此数字交换至对应索引位置。
若遍历完毕尚未返回，则返回 -1−1 。

复杂度分析：
时间复杂度 O(N)O(N) ： 遍历数组使用 O(N)O(N) ，每轮遍历的判断和交换操作使用 O(1)O(1) 。
空间复杂度 O(1)O(1) ： 使用常数复杂度的额外空间。

class Solution:
    def findRepeatNumber(self, nums: [int]) -> int:
        i = 0
        while i < len(nums):
            if nums[i] == i:
                i += 1
                continue
            if nums[nums[i]] == nums[i]: return nums[i]
            nums[nums[i]], nums[i] = nums[i], nums[nums[i]]
        return -1

